datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String            @id @default(cuid())
  username         String            @unique
  email            String            @unique
  createdAt        DateTime          @default(now())
  messages         Message[]
  callsAsCaller    Call[]            @relation("CallerCalls")
  callsAsReceiver  Call[]            @relation("ReceiverCalls")
  roomParticipants RoomParticipant[]
  hostedBreakoutRooms BreakoutRoom[] @relation("HostedBreakoutRooms")
  breakoutRoomParticipants BreakoutRoomParticipant[]
  hostedRooms      Room[]            @relation("HostedRooms") // Added this line
}

model RoomParticipant {
  id       String   @id @default(cuid())
  room     Room     @relation(fields: [roomId], references: [id])
  roomId   String
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  joinedAt DateTime @default(now())
  isHost   Boolean  @default(false)

  @@unique([roomId, userId])
}

model Room {
  id            String            @id @default(cuid())
  name          String            @unique
  isBreakout    Boolean           @default(false)
  host          User              @relation("HostedRooms", fields: [hostId], references: [id])
  hostId        String
  createdAt     DateTime          @default(now())
  breakoutRooms BreakoutRoom[]
  messages      Message[]
  participants  RoomParticipant[]
}

model BreakoutRoom {
  id          String    @id @default(cuid())
  name        String
  mainRoom    Room      @relation(fields: [mainRoomId], references: [id])
  mainRoomId  String
  host        User      @relation("HostedBreakoutRooms", fields: [hostId], references: [id])
  hostId      String
  participants BreakoutRoomParticipant[]
  createdAt   DateTime  @default(now())
}

model BreakoutRoomParticipant {
  id            String       @id @default(cuid())
  breakoutRoom  BreakoutRoom @relation(fields: [breakoutRoomId], references: [id])
  breakoutRoomId String
  user          User         @relation(fields: [userId], references: [id])
  userId        String
  isHost        Boolean      @default(false)

  @@unique([breakoutRoomId, userId])
}

model Call {
  id         String    @id @default(cuid())
  callerId   String
  receiverId String
  startedAt  DateTime  @default(now())
  endedAt    DateTime?
  caller     User      @relation("CallerCalls", fields: [callerId], references: [id])
  receiver   User      @relation("ReceiverCalls", fields: [receiverId], references: [id])
}

model Message {
  id       String   @id @default(cuid())
  content  String
  senderId String
  sender   User     @relation(fields: [senderId], references: [id])
  roomId   String
  room     Room     @relation(fields: [roomId], references: [id])
  sentAt   DateTime @default(now())
}